/**
 * Paylike SDK
 *
 * adapted from App.js generated by the following command:
 *
 * react-native init example
 *
 * https://github.com/facebook/react-native
 */

import React, {Component} from 'react';
import {Text, View, TouchableOpacity, SafeAreaView} from 'react-native';
import {CardDropIn} from 'react-native-paylike';
import {Paylike} from 'react-native-paylike';
import {createDisplayItem} from "../src/utils";
import {NativePayment, NativePaymentButton, canMakeNativePayments} from "react-native-paylike";

const AppState = {
  SELECT_PAYMENT_METHOD: 'SELECT_PAYMENT_METHOD',
  AUTHORIZING: 'AUTHORIZING',
  ERROR: 'ERROR',
  SUCCESS: 'SUCCESS',
  CANCELED: 'CANCELED',
}

const PaymentMethod = {
  CARD: 'CARD',
  NATIVE: 'NATIVE',
}

export default class App extends Component {
  constructor(props) {
    super(props);

    this.state = {
      transaction: null,
      paymentMethod: null,
      appState: AppState.SELECT_PAYMENT_METHOD,
    };

    this.paylike = new Paylike('paylike_public_key');
  }


  /**
   *
   * Showcase app related methods.
   * The interesting stuff is below :)
   *
   */

  _tryAgain = () => {
    this.setState({
      appState: AppState.SELECT_PAYMENT_METHOD,
    })
  }


  _getInfoView = (message) => {
    return (
        <View style={{flex: 1, backgroundColor: 'white', flexDirection: 'column', justifyContent: 'center', alignItems: 'center'}}>
          <Text>
            {message}
          </Text>
          <TouchableOpacity onPress={this._tryAgain} style={{padding: 10, backgroundColor: '#e1e2e3'}}>
            <Text>
              TRY AGAIN
            </Text>
          </TouchableOpacity>
        </View>
    )
  }

  _selectPaymentMethod = (paymentMethod) => () => {
    this.setState({
      paymentMethod: paymentMethod,
      appState: AppState.AUTHORIZING,
    });
  }


  /**
   * The interesting stuff
   * library related methods
   */


  /**
   * example payment request
   *
   * custom and displayItems are optional
   */
  getPaymentRequest = () => {
    return {
      currency: 'RON',
      amount: 1000,
      descriptor: 'descriptor',
      custom: {notes: 'Custom Object'},
      displayItems: [
        createDisplayItem(500, 'ðŸšŒ CJ -> SM âœ•1'),
        createDisplayItem(500, 'ðŸšŒ SM -> CJ âœ•1'),
      ]
    }
  }

  /**
   * This is called when the transaction authorization succeeded.
   * !IMPORTANT! result may be null if isTransactionAlreadyMade callback returned true
   *
   * After this is called, it is safe to unmount the component.
   */
  onSuccess = (result) => {

    if (result) {
      const transaction = result.transaction;
      console.log(transaction.id); // TODO: send the transaction id to your server in order to capture it
    }

    this.setState({
      result: result,
      appState: AppState.SUCCESS,
    });
  }

  /**
   * This is called when the transaction authorization failed because of network failure
   * and other unexpected errors from which the component can't recover.
   *
   * After this is called, it is safe to unmount the component.
   */
  onError = (error) => {
    console.log(error);

    this.setState({
      message: error,
      appState: AppState.ERROR,
    });
  }


  /**
   * This is called when the user has canceled the payment flow.
   *
   * !IMPORTANT!
   * A user may trigger a cancel action but the authorization
   * has already been made. This mainly happens in the case of NativePayments.
   * In this case, the callback is invoked with the already authorized transaction as a parameter
   * so you can void it at the server level.
   *
   * After this is invoked, it is safe to unmount the component.
   */
  onCancel = (transaction) => {
    if (transaction) {
      // TODO: transaction must be canceled at the server level
      this.setState({
        message: 'Canceled with transaction already made: ' + transaction.id,
        appState: AppState.CANCELED,
      });
    } else {
      this.setState({
        message: 'Canceled',
        appState: AppState.CANCELED,
      });
    }
  }

  /**
   * !IMPORTANT! This callback is optional. If not provided, the component won't retry the authorization
   *
   * This callback is invoked whenever a retryable error (e.g. network error, gateway error) has occurred.
   * Since authorizing a transaction isn't idempotent, you should do a server level check
   * in order to prevent a double authorization.
   *
   * return a promise that resolves to true or false
   *
   * if the promise resolves to false, onError will be invoked with the error parameter set to the underlying problem
   * if the promise resolves to true, onSuccess will be invoked but result will be null
   */
  isTransactionAlreadyMade = () => {

    // TODO: make a server call and determine if a transaction has been created

    // we'll assume that the transaction is not created
    return Promise.resolve(false);
  };

  /**
   * This callback is invoked after the user authorizes a transaction, but before the call to Paylike servers.
   * This is the perfect place to instruct the component to abandon the payment flow.
   * Example use case: The user didn't pay within a time frame.
   *
   * return a promise that resolves to true or false
   *
   * if the promise resolves to false, onCancel will be invoked
   * if the promise resolves to true, the component will continue with the authorization process
   */

  shouldContinueWithAuthorization = () => {
    return Promise.resolve(true);
  };

  render() {
    return (
        <React.Fragment>

        {this.state.appState === AppState.ERROR &&
        this._getInfoView('ERROR:' + JSON.stringify(this.state.message))
        }
        {this.state.appState === AppState.CANCELED &&
        this._getInfoView('CANCELED:' + JSON.stringify(this.state.message))
        }
        {this.state.appState === AppState.SUCCESS &&
          this._getInfoView('SUCCESS. CHECK YOUR PAYLIKE DASHBOARD')
        }

        {this.state.appState === AppState.SELECT_PAYMENT_METHOD &&
          <View style={{flex: 1, backgroundColor: 'white', flexDirection: 'column', justifyContent: 'center', alignItems: 'center',}}>
            <TouchableOpacity style={{padding: 10, margin: 20, backgroundColor: '#e1e2e3'}} onPress={this._selectPaymentMethod(PaymentMethod.CARD)} >
              <Text>CARD</Text>
            </TouchableOpacity>
            {canMakeNativePayments() &&
              <NativePaymentButton
                  style={{
                   // available styling options
                  margin: 20,
                  width: 270,
                  height: 50,
                  borderRadius: 20,
                }}
                  buttonStyle={'black'} // black, white, whiteOutline
                  buttonType={'book'} // buy, setUp, inStore, donate, checkout, book, plain
                  onPress={this._selectPaymentMethod(PaymentMethod.NATIVE)}
              />
            }
          </View>
        }

        { // CardDropIn
          this.state.appState === AppState.AUTHORIZING && this.state.paymentMethod === PaymentMethod.CARD &&
          <SafeAreaView style={{flex: 1, backgroundColor: 'black'}}>
            <CardDropIn
                onSuccess={this.onSuccess}
                onError={this.onError}
                onCancel={this.onCancel}

                shouldContinueWithAuthorization={this.shouldContinueWithAuthorization}
                isTransactionAlreadyMade={this.isTransactionAlreadyMade}

                paylike={this.paylike}         // a Paylike sdk instance
                locale={'en'}                  // locale of the component
                theme={{showTitles: true}}     // an optional theme. see the default theme in CardDropIn

                paymentRequest={this.getPaymentRequest()}
            >
              {
                // Custom header
              }
              <Text> Your trip is ready </Text>
            </CardDropIn>
          </SafeAreaView>
        }


        { // NativePayment
          this.state.appState === AppState.AUTHORIZING && this.state.paymentMethod === PaymentMethod.NATIVE &&
          <SafeAreaView style={{flex: 1, backgroundColor: 'black'}}>
            <NativePayment
                onSuccess={this.onSuccess}
                onError={this.onError}
                onCancel={this.onCancel}

                shouldContinueWithAuthorization={this.shouldContinueWithAuthorization}
                isTransactionAlreadyMade={this.isTransactionAlreadyMade}

                paylike={this.paylike} // a Paylike sdk instance

                paymentRequest={this.getPaymentRequest()}
                merchantId={'io.paylike.showcaseapp'} // an Apple merchant id
            />
          </SafeAreaView>
        }

        </React.Fragment>
    );
  }
}
